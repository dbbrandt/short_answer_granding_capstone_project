8.5 List based is preferred because it is not constrained to a fix size.  The down fall is that it takes up more memory because each node has at least two parts, the item and the pointer.   
8.5 List based is preferred because the stack you create is not limited in size and can increase or decrease in size as needed.
8.5 Array-based prevents the push operation  from adding an item to the stack if the stack's size limit, which is the size of the array, has been reached.  List-base much simpler to write and does not have a fixed size.
8.5 Array based because they are faster, easier to keep track of and less complexity in code.
8.5 list-based because it does not use a fixed size like an array would.
8.5 usually linked list because it doesn't have a fixed size. But if you know or want to set a max size array is better.
8.5 List-based.  Allows more flexablity with size of the stack.
8.5 Linked lists are preferred for implementing stacks because they are not limited to a set number of elements.
8.5 The list-based implementation is preferred since the big O(1) is very efficient.
8.5 Linked list implementation is preferred. That way, the list can be moved along without iteration.
8.5 list because it its size is not determined
8.5 Linked list because it takes up less memory and is scalable
8.5 List-based, as the list can be grown dynamically, and as the head node is easily accessible.
8.5 list based because the nodes are easier to work with and can be traversed easier
8.5 list based, because of the lower processing overhead and nearly unlimited space, due to linked list design.
8.5 list-based<br>It can grow and shrink dynamically, unlike the fixed size array.
8.5 list based because arrays can become full, lists can grow/shrink as needed
8.5 List-bases implentation is preferred. One of the main reasons is because of that the list has no fixed size.
8.5 Array is preferred.  Linked list implementation requires extra space to store pointers.  Space is allocated dynamically in the list-based which takes more time.
8.5 link list is preferred because it makes pushing elements easier because there is no limit other than memory to the number of elements
8.5 List-based implementation is much easier to implement, and allows the stack to scale as necessary. It is therefore the preferred implementation.
8.5 Array based implementation requires less memory than a list based.<br>inceasing the size of a  resizeable array can waste storage and time
8.5 in an array based stack you would need to pre-determine a size, where in a list you can increase or decrease the size however you want.
8.5 A list-based implementation is preferred because the list is more<br> flexible than a array.
8.5 i would think a list based would be better because you can change the pointers of the nodes to add or remove things from your stack
8.5 list based, because it is much more flexible, easier to use, and doesnt need to have a max size defined when it is made.
8.5 array based list is preferred because it can hold any size as long as u specify it. 
