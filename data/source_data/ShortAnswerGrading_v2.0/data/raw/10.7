10.7 This is on the runtime order of log(n) where n is the number of nodes in the binary tree.
10.7 In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.
10.7 n-1/2 is the algorithm to compare and find an element. 
10.7 At most its equivalent to the height of the tree.
10.7 Log(n)
10.7 O(log n)
10.7 Depends on what half of the tree and the levels you have.
10.7 O(log n) in balanced trees
10.7 n-1
10.7 log(n)
10.7 O(nlog(n))
10.7 nLog(n)
10.7 logn
10.7 at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.
10.7 O(n)
10.7 It takes at most 3 comparisons to find and element in a binary search tree
10.7 log (n)   where n equals the number of nodes.
10.7 it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level
10.7 At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.
10.7 O(log n)
10.7 log n comparisons
10.7 (n^k)-1   where k is the height of the tree
10.7 it takes h comparisons, where h is the height of the tree
10.7 2 way key comparison 
