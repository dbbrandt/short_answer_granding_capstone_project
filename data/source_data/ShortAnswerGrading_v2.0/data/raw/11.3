11.3 ie. GradeBook myGradeBook();<br><br>call upon the class and then give it a name like shown
11.3 They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.
11.3 not answered
11.3 Objects are initialized by a value given.  When an object is defined for a certain task.<br><br>
11.3 They are initialized with a " . " (dot) between the constructor and the object being created.
11.3 objectname classname();<br><br>to call a function from the class:<br><br>objectname.funciton();
11.3 If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.
11.3 classname objectname(input parameters);
11.3 When the class is called by the Constructor
11.3 Constructors; default when not provided by user, or programmer specified constructors.
11.3 Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.
11.3 &lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;
11.3 variables are set to a given value, or 0 if none is given.
11.3 When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).
11.3 Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.
11.3 If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class.  If no constructor is specified or found, c++ will use a default one with no parameters.<br><br>Gradebook myGradebook;<br><br>In this bit of code, the class Gradebook has been initialized as object myGradebook.
11.3 objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.
11.3 They are initialized with a constructor.
11.3 The value is specified after declaration,<br><br>It can initialized anywhere between the declaration and the corresponding }.
11.3 with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.
11.3 initialized using the same name as the class
11.3 they are initialized to a value dependent on the compiler
11.3 memory is allocated in accordance with their type and initialization input.
11.3 Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.
11.3 using constructor
11.3 by giving them a value
11.3 By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.<br><br>Ex. Class myClass(x, y)
11.3 objects are initialized by giving the object a type, name, and initial value
11.3 they are initialized to 0
11.3 obj. are initialized by the variables that call them, when they are created within a class. <br><br>e.i. classname objectname etc. 
