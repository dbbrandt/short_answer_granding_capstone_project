7.4 They are passed by reference because you want the function to change the pointer<br>
7.4 Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.
7.4 - A function with access to a linked list's head pointer has access to the entire list.<br><br>      - Pass the head ponter to a function as a reference argument.
7.4 By using a node.
7.4 Pass-by-reference
7.4 you send a pointer to an object of the LinkedList class
7.4 Passed as a pointer to the head.
7.4 Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list
7.4 You have to pass the head pointer to a function since it has access to the entire list.
7.4 You pass the head pointer to a function as a reference argument.
7.4 not answered
7.4 passes a pointer to a linked list object
7.4 The linked list object contains the head, through which the other elements are accessible.
7.4 By the head of the list. It takes the head address and traverses from there on in. 
7.4 as a pointer node.
7.4 A method with access to a linked list's head pointer as access to the entire list
7.4 A function with access to a linked list's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument
7.4 the head pointer is passed to a function as a reference argument.
7.4 the pointer to the first element is passed to a function
7.4 linked lists are passed by reference, specificly the Head pointer
7.4 Pass the head pointer to a function as a reference argument
7.4 by refrenece
7.4 By passing the head pointer and going through the list as needed inside the function.
7.4 linked lists are passed by using pointers<br>
7.4 the head object is passed to the function
7.4 Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. 
