6.4 The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.
6.4 An array can be addressed in pointer/offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.
6.4 Element b[ n ] can be accessed by  *( bPtr + n ).
6.4 Using either the name of the array as a pointer or using a separate pointer that points to the array.
6.4 An element b[3] can be referenced by using *( bPtr + 3) instead.
6.4 you get the memory location of the first element and the you add an offset to it to get other elements.
6.4 yes *(array +offset)
6.4 The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer "a" which stores the address of a[0].
6.4 Element b[ n ] can be accessed by  *( bPtr + n ) is an example of how an array can be addressed as pointer/offset notation.<br>
6.4 *(array + element)
6.4 *f[3]
6.4 you can have a pointer to the front of the array and add to the memory location (or offset from the initial value).
6.4 The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.
6.4 With<br>int x[10];<br>int *xPtr;<br>xPtr = x;<br>Address &x[1] is the same as xPtr + 1.
6.4 Takes the number of array elements and points to each at a time
6.4 The array can act as a pointer or be referenced by a pointer.<br><br>*(arrayPtr + 3) or *(array + 3)
6.4 by using the *(pointer + element-index)
6.4 using the star operator. <br><br>array: b[n] can be accessed by *(bpointer +n)
6.4 Element A[n] can be accessed by *(APtr + n)
6.4 by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)
6.4 First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity's address plus some offset. i.e.<br>ptrToArray = array;  nthEntity = *(ptrToArray + n);
6.4 &[b3] is as bptr + 3.<br>Array can be treated as pointer
6.4 a[i] = *(a+i)
6.4 &b[3]<br><br>bPtr + 3
6.4 *(arrayName + index)
6.4 multi-dimensional array
