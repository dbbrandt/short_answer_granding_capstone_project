2.6  A function definition does not require any additional information that needs to be passed inside its parenthesis<br> to execute. While a definition prototype requires more than one parameters to be passed in order to complete its <br>task.
2.6 The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ).<br>The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.
2.6 A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.
2.6 Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.
2.6 A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.
2.6 A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.
2.6 prototype only tells the user what data types go into a function and what type is returned.
2.6 Function prototype is located in the .h file and only contains the access function name and paramater type.<br><br>Function definition contains the code for the function to perform its activity.
2.6 a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...
2.6 A function prototype describes a class's public interface without revealing the class's member function implementations
2.6 Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.
2.6 a prototype does not include any actual code where the function has all the code that is executed in the program.
2.6 a prototype declares what will be used in the program and the definition 
2.6 A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.
2.6 A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.<br><br>A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.
2.6 A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.
2.6 the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.
2.6 A function prototype describes the class's public interface without providing how the function works.<br>A function definition contains the inner workings of the function.
2.6 prototype states all functions in that class before compilation, where the definition actually holds the source for the functions
2.6 Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.
2.6 A function prototype just specifies parameters.  A function definition includes parameters and a code body.
2.6 Function prototypes describe the class's public interface
2.6 A prototype only declares name, return type, and input type.<br>A definition also defines the scope, variables, process, and return function 
2.6 a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code
2.6 A functgion prototype is a declaration of a function , while function definition specifies what a function does
2.6 in a function prototype you include the return type, the name of the function, and its parameters if any are needed.<br><br>in a function definition you write the code of what the function will do. 
2.6 A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.
2.6 function prototype describe the class's public interface without revealing <br><br>the class's member function implementations,  function definitions show what <br><br>implementations are being done
2.6 A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.
2.6 function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that. <br>
