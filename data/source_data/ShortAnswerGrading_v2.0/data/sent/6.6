6.6 They can be passed by value or by reference <STOP>
6.6 Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data. <STOP>
6.6 Nonconstant pointer to nonconstant data <STOP> Nonconstant pointer to constant data <STOP> Constant pointer to nonconstant data <STOP> Constant pointer to constant data <STOP>
6.6 Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data. <STOP>
6.6 Pass-by-value or pass-by-reference. <STOP>
6.6 you can pass a pointer to a pointer or pass a reference to pointer. <STOP>
6.6 by address address of bPtr or directly bPtr. <STOP>
6.6 Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. <STOP>
6.6 By argument and reference. <STOP>
6.6 Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data. <STOP>
6.6 pass by value and pass by reference with reference or pointer arguments. <STOP>
6.6 you can pass them with the pointer -LRB- STAR -RRB- or the memory address -LRB- ADDRESS -RRB- <STOP>
6.6 nonconst implies nonconst const implies nonconst nonconst implies const const implies const <STOP>
6.6 Nonconstant pointer to nonconstant data <STOP> Constant pointer to nonconstant data <STOP> Nonconstant pointer to constant data <STOP> Constant point to constant data <STOP>
6.6 Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data. <STOP>
6.6 Pass by reference with reference arguments. function -LRB- int ADDRESS -RRB- <STOP> Pass by reference with pointer arguments. function -LRB- int STAR -RRB- <STOP>
6.6 you can pass the reference or the dereference in a function <STOP>
6.6 1. nonconstant pointer to nonconstant data. <STOP> Its delcaration does no include const qualifier. <STOP> 2. nonconstant pointer to constant data. <STOP> Provides the performance of pass-by-reference and the protection of pass-by-value <STOP> 3. Constant pointer to nonconstant data. <STOP> 4. Constant pointer to constant date. <STOP>
6.6 constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data <STOP>
6.6 Nonconstant pointer to nonconstant data <STOP> Nonconstant pointer to constant data <STOP> Constant pointer to nonconstant data <STOP> Constant pointer to constant data <STOP>
6.6 Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments. <STOP>
6.6 There are four way to pass pointer to a function <STOP> 1. non constant pointer to non constant data <STOP> 2. non constant pointer to constant data. <STOP> 3. constant pointer to non constant data. <STOP> 4. constant pointer to constant data. <STOP>
6.6 nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data <STOP>
6.6 pass by value, pass by reference with reference arguments, pass by reference with pointer arguments <STOP>
6.6 you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither <STOP>
6.6 there are only two ways to pass something, by value and by reference. <STOP> Use of dot or pointer operators within the receiving function and use of " <STOP> ADDRESS" operator inside the passing function <STOP>
