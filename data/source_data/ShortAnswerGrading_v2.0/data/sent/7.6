7.6 they can traverse in both directions <STOP>
7.6 In a doubly linked list you can delete a node without having to traverse the list. <STOP>
7.6 A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer. <STOP>
7.6 A doubly linked list allows you to traverse the list in either direction. <STOP> Each node points to its successor as well as to its predecessor. <STOP>
7.6 Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards. <STOP>
7.6 you can traverse the list from front to back and back to front <STOP>
7.6 You can traverse the list in reverse. <STOP>
7.6 Doubly linked lists can be traversed in both directions <STOP>
7.6 Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions. <STOP>
7.6 You can traverse forwards and backwards through nodes. <STOP>
7.6 You can point both forwards and backwards <STOP>
7.6 You can go backwards in the linked list and access previous data easier without having to keep track of the previous item <STOP>
7.6 Doubly linked lists allow backward movement through the nodes. <STOP>
7.6 they have double pointers, so each node can point forwards or backwards. <STOP> Making it a little easer to get to where you need. <STOP>
7.6 ability to backtrack through a list. <STOP>
7.6 You can move forwards and backwards in the double-linked list. <STOP> Basic only moves forwards. <STOP>
7.6 The advantage is that each node points to bothe its predecessor and its successor. <STOP> There are no special cases for insertion and deletion. <STOP>
7.6 each node points to both its predecessor and its successor. <STOP>
7.6 a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back <STOP>
7.6 A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish <STOP>
7.6 Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction <STOP>
7.6 given a node in the list, one can navigate easily in either direction <STOP>
7.6 You can traverse the list both forward and backwards. <STOP>
7.6 a doubly linked list allows you to back up from a node rather than having to go through the entire list again <STOP>
7.6 Gives faster times for some operations such as insertion and deletion <STOP>
7.6 The primary disadvantage of doubly linked lists are that -LRB- 1 -RRB- each node requires an extra pointer, requiring more space, and -LRB- 2 -RRB- the insertion or deletion of a node takes a bit longer -LRB- more pointer operations -RRB- . <STOP>
