11.7 The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again. <STOP> An array that is not declared static will keep its original elements. <STOP>
11.7 A static array only has a specific size and it cannot grow. <STOP> Also static arrays cannot be accessed outside the program which created it. <STOP>
11.7 Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates. <STOP>
11.7 Static can be initialized and non-static cannot in C plus plus. <STOP>
11.7 An array declared static remains the same throughout the execution of the program. <STOP>
11.7 a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again. <STOP>
11.7 The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared. or or pass-by-reference??? <STOP>
11.7 a static array has a predetermined size and that size cannot be altered <STOP>
11.7 Arrays declared static can not be changed. <STOP> One not declared static can be altered. <STOP>
11.7 an array that is declared as static will retain the values stored in it is elements between function calls, and will not reinitialize them to default values. <STOP>
11.7 An array that is declared static causes anything that is not initialized to be set to 0. <STOP>
11.7 A static array will have a null character at the end of the array. <STOP>
11.7 static arrays cannot be changed while normal arrays can be changed <STOP>
11.7 An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class. <STOP>
11.7 A static array has class scope, allowing it to remain where other arrays might be recycled. <STOP>
11.7 An array that is static does not change or uninitialize if called later unless explicitly acted upon. <STOP> It does not terminate or change across objects. <STOP> An automatic local array will be cleared and uninitialized if called later outside of it is specific scope. <STOP>
11.7 one declared as static is one that is already defined. <STOP> The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later. <STOP>
11.7 a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced. <STOP>
11.7 A static array retains any modified values after a function call. <STOP> Automatic arrays reset to their initial values when the function ends. <STOP>
11.7 a static array is one that keeps its values and is not initialized every time a class function is called, it is data is not lost at function end. <STOP>
11.7 an array that is declared as static can only be used in the function that its being called in. <STOP> Its a constant array. <STOP> Static is another way of say const. <STOP>
11.7 Values in an array that is not delcared as static will remain constant. <STOP> When an array is declared const values within the array can be manipulated. <STOP>
11.7 the data of a static array cannot be changed <STOP>
11.7 Standard arrays terminate when the functions that call them finish. <STOP> A static array is not removed from memory when it is parent function terminates, leaving it available for other functions -LRB- or new instances of the original function -RRB- . <STOP>
11.7 by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function. <STOP>
11.7 static arrays can be called from anywhere <STOP>
11.7 A static array cannot be changed. <STOP> A regular array can be changed when it is passed to a function or manually. <STOP>
11.7 a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function <STOP>
11.7 An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. <STOP> A non-static array is allocated and freed every time that it comes in and out of scope. <STOP>
11.7 static has a predetermined size that cannot be passed while vis versa. <STOP>
