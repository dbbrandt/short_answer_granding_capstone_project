3.7 Both involve a controlled repetition structures, and they both have a termination test. <STOP> Also both of them can loop forever. <STOP>
3.7 As discussed earlier, recursion may be used to process iterative actions. <STOP> Recursion is used for calculations where the answer can be described in a function that relates to itself. <STOP>
3.7 Both iteration and recursion are based on control statements and involve repetition. <STOP> They can both also occur indefinitely. <STOP>
3.7 Both are based on a control statement <STOP> Iteration-repetition structure <STOP> Recursion-selection structure <STOP> Both involve repetition <STOP> Iteration-explicitly uses repetition structure <STOP> Recursion-repeated function calls <STOP> Both involve a termination test <STOP> Iteration-loop-termination test <STOP> Recursion-base case <STOP> Both gradually approach termination <STOP> Iteration-modifies counter until loop-termination test fails <STOP> Recursion-produces progressively simpler versions of problem <STOP> Both can occur indefinitely <STOP> Iteration-if loop-continuation condition never fails <STOP> Recursion-if recursion step does not simplify the problem <STOP>
3.7 Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely. <STOP>
3.7 Both rely on repetition, both have a base case, both can become an infinite loop. <STOP> Anything recursive can also be solved with iteration. <STOP>
3.7 Both will repeat -LRB- loop -RRB- until a condition is met, and exit the loop. <STOP> Both are capable of entering an infinite loop. <STOP>
3.7 anything you can do iterativly you can do recursively <STOP>
3.7 Both are repetative and both have a end test. <STOP>
3.7 Incorrectly writing either can result in infinite loops, both perform the same task over and over. <STOP>
3.7 Both are based on a control statement. <STOP> Both involve repetition. <STOP> Both involve a termination test. <STOP> Both gradually approach termination. <STOP> Both can occur infinitely. <STOP>
3.7 Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely <STOP>
3.7 not answered <STOP>
3.7 anything you can do recursively you can do iteratively <STOP>
3.7 Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted. <STOP>
3.7 Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit. <STOP> So both involve a termination test to find that limit and both slowly approach that termination limit. <STOP> Both are based on a control statement as well. <STOP> If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation. <STOP>
3.7 both based on control statement, involve repetition, and involve a termination test within loops <STOP>
3.7 they are methods of repeating the same task. <STOP>
3.7 Both involve a termination test. <STOP> They use a control statement and repition to solve the problem. <STOP> They can also result in an infinite loop. <STOP>
3.7 based on a control statement, involve repetition, involve a termination test. <STOP>
3.7 Both are bases on a control statement. <STOP> Both involve repetition. <STOP> Both involve a termination test. <STOP> Both gradually approach termination. <STOP> Both can occur infinitely. <STOP>
3.7 both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly. <STOP>
3.7 they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely <STOP>
3.7 They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly. <STOP>
3.7 Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their termination requirements are not met. <STOP>
3.7 both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely <STOP>
3.7 they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached -LRB- its called the base case in recursion -RRB- . <STOP>
3.7 Based on control statement; involve repetition; involve a terminal test; both can occur infinitly <STOP>
3.7 repetition, termination test, eventually terminate, occur infinately <STOP>
3.7 both need to have some kind of base case to tell when the loop needs to stop. <STOP>
3.7 they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. <STOP> Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through <STOP>
