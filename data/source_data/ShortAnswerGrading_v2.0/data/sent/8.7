8.7 isEmptry -LRB- -RRB- or or determines if the stack is full or not pop -LRB- -RRB- or or to remove the top element if it is not the on you are looking for search -LRB- -RRB- or or you compare each element of the stack to the data you are looking for. <STOP>
8.7 You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for. <STOP>
8.7 Push adds a given node to the top of the stack leaving previous nodes below. <STOP> Pop removes and returns the current top node of the stack. <STOP>
8.7 Using linked lists and stacks, you would need a temp stack to retain the values. <STOP> Then you would use the Pop -LRB- -RRB- function to pop off each element and then compare it. <STOP> If its not the element your looking for, Push -LRB- -RRB- it to the temp stack. <STOP> Repeat until the element is found. <STOP> When you find it, Pop -LRB- -RRB- off the temp stack back onto the regular stack to have a complete stack again. <STOP>
8.7 Pop each item off the top until you find what you are looking for. <STOP> If the stack ends up empty and you never found the item, then it does not exist in the stack. <STOP> It may also be necessary to save the popped values in case you want to recreate the stack. <STOP>
8.7 if the stack is implemented using an array you could simply search the array for the item. <STOP> If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list. <STOP>
8.7 You need to pop each item on the stack and compare the item. <STOP> Once the item is found, no more items need to be removed. <STOP>
8.7 Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. <STOP> When finished, pop the items from the second stack and push them back onto the first stack -LRB- this will ensure the order of the elements is maintained -RRB- . <STOP>
8.7 Basically pop the stack until you find the given element. <STOP>
8.7 Iterate through the stack, checking the number against the current element. <STOP>
8.7 pop and push <STOP>
8.7 pop all elements off stack until you find that element and then push the popped elements back on the stack <STOP>
8.7 Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack. <STOP>
8.7 either traverse the entire list and pop the given part or create a pointer system that automatically points to it. <STOP>
8.7 Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed. <STOP> With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack. <STOP>
8.7 if top item! equals given element pop the stack. <STOP> Repeat until item is found or stack is empty <STOP>
8.7 could traverse through the list or array to find the element. <STOP>
8.7 you need the pop opertation to go throught the stack and find the element. <STOP>
8.7 createStack, push, isEmpty, pop, and a boolean return value. <STOP>
8.7 you would have to traverse the stack popping each element to search it <STOP>
8.7 Pop each element off the stack -LRB- and into another stack for storage -RRB- until the desired element is found. <STOP>
8.7 pop operation <STOP>
8.7 to pop elements then push them back <STOP>
8.7 A function to keep track of the elements popped and a function to put the popped elements backinto the function. <STOP>
8.7 you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost <STOP>
8.7 you would need to perform a search through the list of elements -LRB- i dont really understand what this question is asking ... its not very clear? <STOP> -RRB- <STOP>
8.7 StackPush -LRB- -RRB- <STOP> StackPop -LRB- -RRB- <STOP> StackIsEmpty -LRB- -RRB- <STOP>
