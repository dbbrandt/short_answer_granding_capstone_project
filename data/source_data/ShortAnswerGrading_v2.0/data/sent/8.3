8.3 An array has a fixed size. <STOP> You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added. <STOP> Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array. <STOP>
8.3 By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. <STOP> You increment top when an element is pushed and you decrement it when an item is popped. <STOP>
8.3 If you use a dynamically allocated array, you must provide a destructor and copy constructor. <STOP>
8.3 Create a int value that stores the "head" of the stack. <STOP> Increment the top when one element is pushed and decrement after it is popped. <STOP>
8.3 Use a pointer that always points to the end of the array list for push or pop modifications. <STOP>
8.3 if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also. <STOP>
8.3 You predetermine the size of the stack as you would an array. <STOP> This type can not grow. <STOP>
8.3 Declare a variable that points the last item in the array, which increases -LRB- plus plus -RRB- when items are pushed onto the stack, and decreases -LRB- -- -RRB- when an item is popped off the top. <STOP>
8.3 Allocate an array of some size. <STOP> The bottom stack element is stored at some element. <STOP> Last index in the array is the top. <STOP> Increment top when one element is pushed, decrement after pop. <STOP>
8.3 You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head. <STOP>
8.3 Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad <STOP>
8.3 treat the beginning of the array as the beginning of the stack <STOP>
8.3 Use an index value called top to keep track of the last element in the array. <STOP>
8.3 create an array and implement pointers that point to the next list item down and stack them up. <STOP>
8.3 for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element. <STOP>
8.3 Create an array based on a pre-defined size N There cannot be more elements than N. <STOP> Bottom stack element stored at element 0 last index in the array is the top <STOP> Increment top when one element is pushed, decrement after pop <STOP>
8.3 with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array <STOP>
8.3 Allocate an array of some pre-defined size. <STOP> Bottom stack element stored at element 0. The last index in the array is the top. <STOP> Increment top when one element is pushed. <STOP>
8.3 Create an array, size N. N plus plus when one element is pushed. <STOP> N --when one element is popped. <STOP>
8.3 define an array and keep track of a pointer to the last element as items are added <STOP>
8.3 By allocating an array of predetermined size, and an integer to track the top element of the stack. <STOP> The bottom member of the stack will go in element 0 of the array, and for each element pushed the "top" tracking integer is incremented. <STOP>
8.3 Allocate an array of some size, bottom stack element stored at element 0 <STOP>
8.3 you store the stack in the array but you have to keep in mind the first element <STOP>
8.3 You keep track of the last item entered into the array and do not allow the user access to the other parts of the array. <STOP>
8.3 using arrays, you are pushing one int at a time into the stack until you get to the end of your array <STOP>
8.3 by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list <STOP>
8.3 Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. <STOP> Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. <STOP>
