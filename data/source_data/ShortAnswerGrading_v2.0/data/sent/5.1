5.1 Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array. <STOP>
5.1 Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region. <STOP>
5.1 The sorted array or list is built one entry at a time. <STOP>
5.1 It starts with the second element and checks it to see if it is less than the element -LRB- s -RRB- to the left of it and if it is it inserts it into its corrected position. <STOP>
5.1 Compare two numbers at a time and swap until the entire list is sorted. <STOP>
5.1 Assume the first number is sorted, then move down the list and "insert" the numbers you come across into the corresponding place on the sorted side of the list. <STOP>
5.1 insertion sort is were after k iterations the first k items in the array are sorted it take the k plus 1 item and inserts it into the correct position in the already sorted k elements. <STOP>
5.1 Looking at the 2nd element move forward and place the element in the correct spot. <STOP>
5.1 Starting at the beginning of an array, take each element in order and place it in it is correct position relative to all previously sorted elements. <STOP>
5.1 To sort the elements in an array by removing an element from the input data and inserting it at the correct position. <STOP>
5.1 Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list. <STOP>
5.1 Take a number and choose a pivot point and insert the number in the correct position from the pivot point. <STOP>
5.1 have a marker and sort everything to the left of the value for every new value when moving to the right. <STOP>
5.1 The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left. <STOP>
5.1 Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements. <STOP>
5.1 it goes through the list only once, picking each integer and putting it in its desired position, then continuing. <STOP>
5.1 Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array. <STOP>
5.1 Insert the item into its proper position by shifting larger sorted array values to the right. <STOP>
5.1 a comparison sort in which the sorted array is built one entry at a time <STOP>
5.1 Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array. <STOP>
5.1 Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list. <STOP>
5.1 the insertion sort creates a new array and inserts each item in its place with respect to the new array. <STOP>
5.1 Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted. <STOP>
5.1 it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on ... <STOP>
5.1 Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element. <STOP>
5.1 one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items <STOP>
5.1 you take each element and insert it in the correct position with respect to all the elements before it <STOP>
5.1 Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array -LRB- or list -RRB- is built one entry at a time. <STOP>
