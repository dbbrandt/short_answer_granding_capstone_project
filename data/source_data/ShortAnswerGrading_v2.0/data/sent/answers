1.1 To simulate the behaviour of portions of the desired software product. <STOP>
1.2 The testing stage can influence both the coding stage -LRB- phase 5 -RRB- and the solution refinement stage -LRB- phase 7 -RRB- <STOP>
1.3 Abstraction and reusability. <STOP>
1.4 At the main function. <STOP>
1.5 A location in memory that can store a value. <STOP>
1.6 Variables can be declared anywhere in a program. <STOP> They can be declared inside a function -LRB- local variables -RRB- or outside the functions -LRB- global variables -RRB- <STOP>
1.7 The block inside a do ... while statement will execute at least once. <STOP>
2.1 Data members -LRB- attributes -RRB- and member functions. <STOP>
2.2 Data members can be accessed from any member functions inside the class defintion. <STOP> Local variables can only be accessed inside the member function that defines them. <STOP>
2.3 A constructor is called whenever an object is created, whereas a function needs to be called explicitely. <STOP> Constructors do not have return type, but functions have to indicate a return type. <STOP>
2.4 If no constructor is provided, the compiler provides one by default. <STOP> If a constructor is defined for a class, the compiler does not create a default constructor. <STOP>
2.5 Unlimited number. <STOP>
2.6 A function prototype includes the function signature, i. e., the name of the function, the return type, and the parameters 's type. <STOP> The function definition includes the actual body of the function. <STOP>
2.7 To store a class interface, including data members and member function prototypes. <STOP>
3.1 The name of the function and the types of the parameters. <STOP>
3.2 File scope. <STOP>
3.3 It makes a copy of the function code in every place where a function call is made. <STOP>
3.4 It avoids making copies of large data structures when calling functions. <STOP>
3.5 Based on the function signature. <STOP> When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call. <STOP>
3.6 If the recursion step is defined incorrectly, or if the base case is not included. <STOP>
3.7 They both involve repetition; they both have termination tests; they can both occur infinitely. <STOP>
4.1 In the array declaration, or by using an initializer list. <STOP>
4.2 The strings declared using an array of characters have a null element added at the end of the array. <STOP>
4.3 by reference. <STOP>
4.4 The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called. <STOP>
4.5 All the dimensions, except the first one. <STOP>
4.6 Run-time error. <STOP>
4.7 By rows. <STOP>
5.1 Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left. <STOP>
5.2 Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element. <STOP>
5.3 N -LRB- the length of the array -RRB- operations achieved for a sorted array. <STOP>
5.4 When the size of the array to be sorted is 1 -LRB- or 2 -RRB- <STOP>
6.1 A variable that contains the address in memory of another variable. <STOP>
6.2 The memory address of its operand. <STOP>
6.3 An alias -LRB- synonym -RRB- for the name of the object that its operand points to in memory. <STOP> It is the dereferencing operator. <STOP>
6.4 By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element. <STOP>
6.5 The size in bytes of its operand. <STOP>
6.6 There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data. <STOP>
6.7 The address of the location in memory where the function code resides. <STOP>
7.1 A collection of elements that can be allocated dynamically. <STOP>
7.2 The linked lists can be of variable length. <STOP>
7.3 The elements in an array can be accessed directly -LRB- as opposed to linked lists, which require iterative traversal -RRB- . <STOP>
7.4 By reference. <STOP>
7.5 The last element in a circular linked list points to the head of the list. <STOP>
7.6 All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list. <STOP>
7.7 Extra space required to store the back pointers. <STOP>
8.1 A data structure that can store elements, which has the property that the last item added will be the first to be removed -LRB- or last-in-first-out -RRB- <STOP>
8.2 push and pop <STOP>
8.3 Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array. <STOP>
8.4 Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list. <STOP>
8.5 Link-based, because they are dynamic -LRB- no size constraints -RRB- <STOP>
8.6 First, they are converted into postfix form, followed by an evaluation of the postfix expression. <STOP>
8.7 Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack. <STOP>
9.1 A data structure that can store elements, which has the property that the last item added will be the last to be removed -LRB- or first-in-first-out -RRB- . <STOP>
9.2 enqueue and dequeue <STOP>
9.3 Use a circular array. <STOP> Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around. <STOP>
9.4 Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list. <STOP>
9.5 Link-based, because they are dynamic -LRB- no size constraints -RRB- <STOP>
9.6 push <STOP>
9.7 queue <STOP>
10.1 A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree. <STOP>
10.2 The length of the longest path from the root to any of its leaves. <STOP>
10.3 A node that has no children. <STOP>
10.4 A tree for which the maximum number of children per node is two. <STOP>
10.5 A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child. <STOP>
10.6 Traverse the left subtree, then the root, then the right subtree. <STOP>
10.7 The height of the tree -LRB- or log of the number of elements in the tree -RRB- . <STOP>
11.1 Function members and data members. <STOP>
11.2 Private and public. <STOP>
11.3 By using constructors. <STOP>
11.4 The name of the function and the list of parameters, including their types. <STOP>
11.5 A function that calls itself. <STOP>
11.6 Through iteration. <STOP>
11.7 The static arrays are intialized only once when the function is called. <STOP>
11.8 The char [] will automatically add a null 0 character at the end of the string. <STOP>
11.9 Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem. <STOP>
11.10 It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays. <STOP>
12.1 The address of a location in memory. <STOP>
12.2 Implement the algorithm and measure the physical running time. <STOP>
12.3 log -LRB- log n -RRB- ; 2 to the power of -LRB- log n -RRB- ; n to the power of 2; n to the power of 3; n! <STOP>
12.4 It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth. <STOP>
12.5 Linked lists are dynamic structures, which allow for a variable number of elements to be stored. <STOP>
12.6 A data structure that stores elements following the first in first out principle. <STOP> The main operations in a queue are enqueue and dequeue. <STOP>
12.7 push and pop <STOP>
12.8 A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right. <STOP>
12.9 Find the node, then replace it with the leftmost node from its right subtree -LRB- or the rightmost node from its left subtree -RRB- . <STOP>
12.10 The height of the tree. <STOP>
