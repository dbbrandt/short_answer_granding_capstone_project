11.9 For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself <STOP>
11.9 Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem. <STOP>
11.9 The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve. <STOP>
11.9 Divide elements, recur then conquer, which works in merge sort and quicksort. <STOP>
11.9 To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem. <STOP>
11.9 to divide one larger string or line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be. <STOP>
11.9 Split the problem into smaller, more manageable parts, and proceed to address the smaller problems. <STOP>
11.9 dived and conquer is the breaking up of a large complex program into small easy to solve components. <STOP>
11.9 Dividing a larger problem into the smallest incident of the problem and solving the smallest incident. <STOP>
11.9 Break up very large data structures into smaller sub-units, that are easier to manipulate. <STOP>
11.9 The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm. <STOP>
11.9 The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. <STOP>
11.9 Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process. <STOP>
11.9 The idea is to split the problem into half and solve for the smaller split-problems. <STOP>
11.9 The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem. <STOP>
11.9 Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm. <STOP>
11.9 It takes a large problem and splits it into two or more easier or faster solutions, and makes for better readability. <STOP>
11.9 it is the taking of a larger problem and splitting it into simpler smaller problems. <STOP>
11.9 It divides the problem into singular units and works on the problem piece by piece until the problem is solved. <STOP>
11.9 smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution. <STOP>
11.9 a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found. <STOP>
11.9 The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify. <STOP>
11.9 the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached. <STOP>
11.9 dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together. <STOP>
11.9 Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. <STOP> If array have n element, first half have n divided by 2 elements <STOP>
11.9 divide the array in half, sort each half, then sort them back in one array <STOP>
11.9 You take a class and break down everything it is supposed to do into easily managed functions. <STOP>
11.9 this is shown by the use of. cpp and header files. by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file <STOP>
11.9 When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem. <STOP>
11.9 it is the separating of large program into smaller classes then until target is reached. <STOP>
