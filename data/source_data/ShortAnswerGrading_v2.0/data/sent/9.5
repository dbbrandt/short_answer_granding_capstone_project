9.5 List based. <STOP> Because it is on the run time order of N, also it does not have a limited size like an array does <STOP>
9.5 linked list based. because it does not store the items linearly in memory but instead as individual blocks. <STOP>
9.5 List based is preferred because there are no size restrictions. <STOP>
9.5 A list-based implementation would be preferred. <STOP> The array is slightly more complicated, where you would need to keep track of both front and rear. <STOP>
9.5 List-based. <STOP> Array-based queues have a way to complicate things to an extent. <STOP>
9.5 List-based. <STOP> Less code, and no size limitation or declaration ... which means it is also more efficient and versatile. <STOP>
9.5 list based is prefered because it does not have a set size and insertion and deletion can be done very quickly of you keep pointers to first element and last. <STOP>
9.5 List based is preferred because there are space issues with array based due to rightward drift. <STOP> The fix for rightward drift requires constant shifting of the queue data. <STOP>
9.5 Similar to stacks, linked lists are preferable for queues because the size can be adjusted. <STOP>
9.5 array-based is preferred because all you have to keep track of is the array itself and the count. <STOP>
9.5 list because its size is not defined <STOP>
9.5 List-based, because when you enqueue -LRB- or dequeue depending upon your implementation -RRB- you would need to shift all elements to another space with an array, causing a horrid time complexity for large data sets, where as you can just modify the pointers in a list for a constant time complexity <STOP>
9.5 queue 's are best with lists, especially if the tail is kept track of, as the list can be dynamically grown without losing track of the head or tail. <STOP>
9.5 list based, its much simpler and the run time is better <STOP>
9.5 list based, because of the lessened memory usage initially, and the increased limits on how large the que can become. <STOP>
9.5 List-based because it is not fixed size. <STOP>
9.5 list, its dynamic and no size needs to be declared <STOP>
9.5 list bases implementatoin is best because you use pointers to keep track of the front and back pointers. <STOP> Easier to maintain, but uses more memory <STOP>
9.5 list based. <STOP> It can dynamically grow and has fewer restrictions. <STOP>
9.5 list based is preferred because memory allocation is not an issue <STOP>
9.5 List based solutions are preferred, because they allow for queues of any size. <STOP>
9.5 I think array based is batter, because of fixed size, but on other had list base is more flaxible. <STOP> You do not have to worry about the size <STOP>
9.5 list based because you dont need to shift the elements like you do in array based queues <STOP>
9.5 List-based because memory is not constricted. <STOP>
9.5 list based because the array based has to have a fixed size, it cannot be added to or removed from as easily <STOP>
9.5 list-based array is easier and more scalable <STOP>
9.5 list based becuase an arrary based has to have an arrary size and needs to be pre-defined and cannot be changed dynamically. <STOP>
