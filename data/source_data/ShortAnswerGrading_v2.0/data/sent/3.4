3.4 Overall the program has better performance -LRB- means it is faster -RRB- because it does not have to copy large amounts of data. <STOP>
3.4 because you cannot change the original and passing by reference limits memory needed for the program. <STOP>
3.4 Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data. <STOP>
3.4 It is often more efficient to pass references, rather than large objects, to functions. <STOP> This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object. <STOP>
3.4 Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data. <STOP>
3.4 You do not alter the original value of the variable that was passed. <STOP>
3.4 Do not have to make copies of stuff. <STOP>
3.4 you do not use unessesary memory space to copy variables between functions <STOP>
3.4 It elimitates the need to copy large amonts of data <STOP>
3.4 The function can change the data stored in a variable passed by reference directly. <STOP>
3.4 Gives called function the ability to access and modify the caller s argument data. <STOP>
3.4 Gives called function the ability to access and modify the caller s argument data directly. <STOP>
3.4 It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere. <STOP>
3.4 you do not make another copy and waste memory <STOP>
3.4 Passing by reference eliminates the copying of large amounts of data, typical with pass by value. <STOP>
3.4 If a function 's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function. <STOP> Also pass by reference gives the function called the permission to read edit the argument directly. <STOP>
3.4 Gives access to the caller data directly, also it allows for modifying the data. <STOP>
3.4 less overhead overall, and you modify the variable directly. <STOP>
3.4 The original variable being referenced can be modified directly by the called function. <STOP>
3.4 gives function ability to access and modify the caller 's argument data directly <STOP>
3.4 Gives the called function the ability to access and modify the caller 's argument data directly. <STOP>
3.4 Less overhead than passed by value, especially when using large numbers. <STOP>
3.4 large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed <STOP>
3.4 The data can be modified directly instead of making a copy of the data. <STOP> Improves execution time with large amounts of data. <STOP>
3.4 Functions can directly modify arguments that are passed by reference. <STOP>
3.4 It gives access and modify the caller 's argument data directly. <STOP> It eliminate the pass by value overhead of copying large amounts ofdata <STOP>
3.4 it takes less memory, thus it would make the program faster <STOP>
3.4 You are able to modify the variable that is referenced directly. <STOP>
3.4 if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value <STOP>
3.4 only the memory address is sent to the function, so no copy of the object sent needs to be made. <STOP> It makes the function run faster, and saves memory. <STOP>
3.4 Actual arguments are associated with dummy arguments when a function or subroutine is referenced. <STOP> In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram <STOP>
